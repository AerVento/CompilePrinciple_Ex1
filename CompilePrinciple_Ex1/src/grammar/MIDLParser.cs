//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./src/MIDL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MIDLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, WS=38, FLOATING_PT=39, 
		INTEGER=40, BOOLEAN=41, CHAR=42, STRING=43, ID=44;
	public const int
		RULE_specification = 0, RULE_definition = 1, RULE_module = 2, RULE_type_decl = 3, 
		RULE_struct_type = 4, RULE_member_list = 5, RULE_type_spec = 6, RULE_scoped_name = 7, 
		RULE_base_type_spec = 8, RULE_floating_pt_type = 9, RULE_integer_type = 10, 
		RULE_signed_int = 11, RULE_unsigned_int = 12, RULE_declarators = 13, RULE_declarator = 14, 
		RULE_simple_declarator = 15, RULE_array_declarator = 16, RULE_exp_list = 17, 
		RULE_or_expr = 18, RULE_xor_expr = 19, RULE_and_expr = 20, RULE_shift_expr = 21, 
		RULE_add_expr = 22, RULE_mult_expr = 23, RULE_unary_expr = 24, RULE_literal = 25;
	public static readonly string[] ruleNames = {
		"specification", "definition", "module", "type_decl", "struct_type", "member_list", 
		"type_spec", "scoped_name", "base_type_spec", "floating_pt_type", "integer_type", 
		"signed_int", "unsigned_int", "declarators", "declarator", "simple_declarator", 
		"array_declarator", "exp_list", "or_expr", "xor_expr", "and_expr", "shift_expr", 
		"add_expr", "mult_expr", "unary_expr", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'module'", "'{'", "'}'", "'struct'", "'::'", "'char'", "'string'", 
		"'boolean'", "'float'", "'double'", "'long'", "'short'", "'int16'", "'int32'", 
		"'int64'", "'int8'", "'unsigned'", "'uint16'", "'uint32'", "'uint64'", 
		"'uint8'", "','", "'='", "'['", "']'", "'|'", "'^'", "'&'", "'>>'", "'<<'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'~'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "WS", "FLOATING_PT", "INTEGER", "BOOLEAN", "CHAR", "STRING", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MIDL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MIDLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MIDLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MIDLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public SpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificationContext specification() {
		SpecificationContext _localctx = new SpecificationContext(Context, State);
		EnterRule(_localctx, 0, RULE_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 52;
				definition();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__1 || _la==T__4 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_declContext type_decl() {
			return GetRuleContext<Type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_definition);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				type_decl();
				State = 58;
				Match(T__0);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				module();
				State = 61;
				Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MIDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 4, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(T__1);
			State = 66;
			Match(ID);
			State = 67;
			Match(T__2);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 68;
				definition();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__1 || _la==T__4 );
			State = 73;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_typeContext struct_type() {
			return GetRuleContext<Struct_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MIDLParser.ID, 0); }
		public Type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterType_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitType_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declContext type_decl() {
		Type_declContext _localctx = new Type_declContext(Context, State);
		EnterRule(_localctx, 6, RULE_type_decl);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				struct_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				Match(T__4);
				State = 77;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MIDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_listContext member_list() {
			return GetRuleContext<Member_listContext>(0);
		}
		public Struct_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterStruct_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitStruct_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_typeContext struct_type() {
		Struct_typeContext _localctx = new Struct_typeContext(Context, State);
		EnterRule(_localctx, 8, RULE_struct_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(T__4);
			State = 81;
			Match(ID);
			State = 82;
			Match(T__2);
			State = 83;
			member_list();
			State = 84;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext[] type_spec() {
			return GetRuleContexts<Type_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec(int i) {
			return GetRuleContext<Type_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorsContext[] declarators() {
			return GetRuleContexts<DeclaratorsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorsContext declarators(int i) {
			return GetRuleContext<DeclaratorsContext>(i);
		}
		public Member_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterMember_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitMember_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_listContext member_list() {
		Member_listContext _localctx = new Member_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_member_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592194432992L) != 0)) {
				{
				{
				State = 86;
				type_spec();
				State = 87;
				declarators();
				State = 88;
				Match(T__0);
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scoped_nameContext scoped_name() {
			return GetRuleContext<Scoped_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_type_specContext base_type_spec() {
			return GetRuleContext<Base_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_typeContext struct_type() {
			return GetRuleContext<Struct_typeContext>(0);
		}
		public Type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterType_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitType_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_specContext type_spec() {
		Type_specContext _localctx = new Type_specContext(Context, State);
		EnterRule(_localctx, 12, RULE_type_spec);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				scoped_name();
				}
				break;
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				base_type_spec();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97;
				struct_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scoped_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MIDLParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MIDLParser.ID, i);
		}
		public Scoped_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoped_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterScoped_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitScoped_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScoped_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scoped_nameContext scoped_name() {
		Scoped_nameContext _localctx = new Scoped_nameContext(Context, State);
		EnterRule(_localctx, 14, RULE_scoped_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 100;
				Match(T__5);
				}
			}

			State = 103;
			Match(ID);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 104;
				Match(T__5);
				State = 105;
				Match(ID);
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Floating_pt_typeContext floating_pt_type() {
			return GetRuleContext<Floating_pt_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Integer_typeContext integer_type() {
			return GetRuleContext<Integer_typeContext>(0);
		}
		public Base_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterBase_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitBase_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_type_specContext base_type_spec() {
		Base_type_specContext _localctx = new Base_type_specContext(Context, State);
		EnterRule(_localctx, 16, RULE_base_type_spec);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				floating_pt_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				integer_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113;
				Match(T__6);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114;
				Match(T__7);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 115;
				Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_pt_typeContext : ParserRuleContext {
		public Floating_pt_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_pt_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterFloating_pt_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitFloating_pt_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_pt_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_pt_typeContext floating_pt_type() {
		Floating_pt_typeContext _localctx = new Floating_pt_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_floating_pt_type);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				Match(T__9);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				Match(T__10);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 3);
				{
				State = 120;
				Match(T__11);
				State = 121;
				Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_intContext signed_int() {
			return GetRuleContext<Signed_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unsigned_intContext unsigned_int() {
			return GetRuleContext<Unsigned_intContext>(0);
		}
		public Integer_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterInteger_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitInteger_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integer_typeContext integer_type() {
		Integer_typeContext _localctx = new Integer_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_integer_type);
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				signed_int();
				}
				break;
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125;
				unsigned_int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_intContext : ParserRuleContext {
		public Signed_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterSigned_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitSigned_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_intContext signed_int() {
		Signed_intContext _localctx = new Signed_intContext(Context, State);
		EnterRule(_localctx, 22, RULE_signed_int);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				Match(T__12);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				Match(T__13);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 130;
				Match(T__11);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 131;
				Match(T__14);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 132;
				Match(T__11);
				State = 133;
				Match(T__11);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 134;
				Match(T__15);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 135;
				Match(T__16);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsigned_intContext : ParserRuleContext {
		public Unsigned_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsigned_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterUnsigned_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitUnsigned_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsigned_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsigned_intContext unsigned_int() {
		Unsigned_intContext _localctx = new Unsigned_intContext(Context, State);
		EnterRule(_localctx, 24, RULE_unsigned_int);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				Match(T__17);
				State = 139;
				Match(T__12);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140;
				Match(T__18);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 141;
				Match(T__17);
				State = 142;
				Match(T__11);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 143;
				Match(T__19);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 144;
				Match(T__17);
				State = 145;
				Match(T__11);
				State = 146;
				Match(T__11);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 147;
				Match(T__20);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 148;
				Match(T__21);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext[] declarator() {
			return GetRuleContexts<DeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator(int i) {
			return GetRuleContext<DeclaratorContext>(i);
		}
		public DeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorsContext declarators() {
		DeclaratorsContext _localctx = new DeclaratorsContext(Context, State);
		EnterRule(_localctx, 26, RULE_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			declarator();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__22) {
				{
				{
				State = 152;
				Match(T__22);
				State = 153;
				declarator();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_declaratorContext simple_declarator() {
			return GetRuleContext<Simple_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_declaratorContext array_declarator() {
			return GetRuleContext<Array_declaratorContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 28, RULE_declarator);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159;
				simple_declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				array_declarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MIDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Or_exprContext or_expr() {
			return GetRuleContext<Or_exprContext>(0);
		}
		public Simple_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterSimple_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitSimple_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_declaratorContext simple_declarator() {
		Simple_declaratorContext _localctx = new Simple_declaratorContext(Context, State);
		EnterRule(_localctx, 30, RULE_simple_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(ID);
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 164;
				Match(T__23);
				State = 165;
				or_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MIDLParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Or_exprContext or_expr() {
			return GetRuleContext<Or_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exp_listContext exp_list() {
			return GetRuleContext<Exp_listContext>(0);
		}
		public Array_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterArray_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitArray_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_declaratorContext array_declarator() {
		Array_declaratorContext _localctx = new Array_declaratorContext(Context, State);
		EnterRule(_localctx, 32, RULE_array_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(ID);
			State = 169;
			Match(T__24);
			State = 170;
			or_expr();
			State = 171;
			Match(T__25);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 172;
				Match(T__23);
				State = 173;
				exp_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_exprContext[] or_expr() {
			return GetRuleContexts<Or_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_exprContext or_expr(int i) {
			return GetRuleContext<Or_exprContext>(i);
		}
		public Exp_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterExp_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitExp_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exp_listContext exp_list() {
		Exp_listContext _localctx = new Exp_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_exp_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(T__2);
			State = 177;
			or_expr();
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__22) {
				{
				{
				State = 178;
				Match(T__22);
				State = 179;
				or_expr();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 185;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xor_exprContext[] xor_expr() {
			return GetRuleContexts<Xor_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xor_exprContext xor_expr(int i) {
			return GetRuleContext<Xor_exprContext>(i);
		}
		public Or_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterOr_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitOr_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_exprContext or_expr() {
		Or_exprContext _localctx = new Or_exprContext(Context, State);
		EnterRule(_localctx, 36, RULE_or_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			xor_expr();
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26) {
				{
				{
				State = 188;
				Match(T__26);
				State = 189;
				xor_expr();
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xor_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext[] and_expr() {
			return GetRuleContexts<And_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext and_expr(int i) {
			return GetRuleContext<And_exprContext>(i);
		}
		public Xor_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xor_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterXor_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitXor_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXor_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xor_exprContext xor_expr() {
		Xor_exprContext _localctx = new Xor_exprContext(Context, State);
		EnterRule(_localctx, 38, RULE_xor_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			and_expr();
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__27) {
				{
				{
				State = 196;
				Match(T__27);
				State = 197;
				and_expr();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_exprContext[] shift_expr() {
			return GetRuleContexts<Shift_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_exprContext shift_expr(int i) {
			return GetRuleContext<Shift_exprContext>(i);
		}
		public And_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterAnd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitAnd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_exprContext and_expr() {
		And_exprContext _localctx = new And_exprContext(Context, State);
		EnterRule(_localctx, 40, RULE_and_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			shift_expr();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__28) {
				{
				{
				State = 204;
				Match(T__28);
				State = 205;
				shift_expr();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext[] add_expr() {
			return GetRuleContexts<Add_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext add_expr(int i) {
			return GetRuleContext<Add_exprContext>(i);
		}
		public Shift_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterShift_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitShift_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_exprContext shift_expr() {
		Shift_exprContext _localctx = new Shift_exprContext(Context, State);
		EnterRule(_localctx, 42, RULE_shift_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			add_expr();
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__29 || _la==T__30) {
				{
				{
				State = 212;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 213;
				add_expr();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext[] mult_expr() {
			return GetRuleContexts<Mult_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr(int i) {
			return GetRuleContext<Mult_exprContext>(i);
		}
		public Add_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterAdd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitAdd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_exprContext add_expr() {
		Add_exprContext _localctx = new Add_exprContext(Context, State);
		EnterRule(_localctx, 44, RULE_add_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			mult_expr();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__31 || _la==T__32) {
				{
				{
				State = 220;
				_la = TokenStream.LA(1);
				if ( !(_la==T__31 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 221;
				mult_expr();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext[] unary_expr() {
			return GetRuleContexts<Unary_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr(int i) {
			return GetRuleContext<Unary_exprContext>(i);
		}
		public Mult_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterMult_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitMult_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mult_exprContext mult_expr() {
		Mult_exprContext _localctx = new Mult_exprContext(Context, State);
		EnterRule(_localctx, 46, RULE_mult_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			unary_expr();
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 120259084288L) != 0)) {
				{
				{
				State = 228;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 120259084288L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 229;
				unary_expr();
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Unary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterUnary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitUnary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_exprContext unary_expr() {
		Unary_exprContext _localctx = new Unary_exprContext(Context, State);
		EnterRule(_localctx, 48, RULE_unary_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 150323855360L) != 0)) {
				{
				State = 235;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 150323855360L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 238;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MIDLParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_PT() { return GetToken(MIDLParser.FLOATING_PT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MIDLParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MIDLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MIDLParser.BOOLEAN, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMIDLListener typedListener = listener as IMIDLListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMIDLVisitor<TResult> typedVisitor = visitor as IMIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 50, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17042430230528L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,44,243,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,4,0,54,8,0,11,0,12,0,55,1,
		1,1,1,1,1,1,1,1,1,1,1,3,1,64,8,1,1,2,1,2,1,2,1,2,4,2,70,8,2,11,2,12,2,
		71,1,2,1,2,1,3,1,3,1,3,3,3,79,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
		1,5,5,5,91,8,5,10,5,12,5,94,9,5,1,6,1,6,1,6,3,6,99,8,6,1,7,3,7,102,8,7,
		1,7,1,7,1,7,5,7,107,8,7,10,7,12,7,110,9,7,1,8,1,8,1,8,1,8,1,8,3,8,117,
		8,8,1,9,1,9,1,9,1,9,3,9,123,8,9,1,10,1,10,3,10,127,8,10,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,3,11,137,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,3,12,150,8,12,1,13,1,13,1,13,5,13,155,8,13,10,13,
		12,13,158,9,13,1,14,1,14,3,14,162,8,14,1,15,1,15,1,15,3,15,167,8,15,1,
		16,1,16,1,16,1,16,1,16,1,16,3,16,175,8,16,1,17,1,17,1,17,1,17,5,17,181,
		8,17,10,17,12,17,184,9,17,1,17,1,17,1,18,1,18,1,18,5,18,191,8,18,10,18,
		12,18,194,9,18,1,19,1,19,1,19,5,19,199,8,19,10,19,12,19,202,9,19,1,20,
		1,20,1,20,5,20,207,8,20,10,20,12,20,210,9,20,1,21,1,21,1,21,5,21,215,8,
		21,10,21,12,21,218,9,21,1,22,1,22,1,22,5,22,223,8,22,10,22,12,22,226,9,
		22,1,23,1,23,1,23,5,23,231,8,23,10,23,12,23,234,9,23,1,24,3,24,237,8,24,
		1,24,1,24,1,25,1,25,1,25,0,0,26,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,0,5,1,0,30,31,1,0,32,33,1,0,34,36,2,0,
		32,33,37,37,1,0,39,43,256,0,53,1,0,0,0,2,63,1,0,0,0,4,65,1,0,0,0,6,78,
		1,0,0,0,8,80,1,0,0,0,10,92,1,0,0,0,12,98,1,0,0,0,14,101,1,0,0,0,16,116,
		1,0,0,0,18,122,1,0,0,0,20,126,1,0,0,0,22,136,1,0,0,0,24,149,1,0,0,0,26,
		151,1,0,0,0,28,161,1,0,0,0,30,163,1,0,0,0,32,168,1,0,0,0,34,176,1,0,0,
		0,36,187,1,0,0,0,38,195,1,0,0,0,40,203,1,0,0,0,42,211,1,0,0,0,44,219,1,
		0,0,0,46,227,1,0,0,0,48,236,1,0,0,0,50,240,1,0,0,0,52,54,3,2,1,0,53,52,
		1,0,0,0,54,55,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,1,1,0,0,0,57,58,3,
		6,3,0,58,59,5,1,0,0,59,64,1,0,0,0,60,61,3,4,2,0,61,62,5,1,0,0,62,64,1,
		0,0,0,63,57,1,0,0,0,63,60,1,0,0,0,64,3,1,0,0,0,65,66,5,2,0,0,66,67,5,44,
		0,0,67,69,5,3,0,0,68,70,3,2,1,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,
		0,0,71,72,1,0,0,0,72,73,1,0,0,0,73,74,5,4,0,0,74,5,1,0,0,0,75,79,3,8,4,
		0,76,77,5,5,0,0,77,79,5,44,0,0,78,75,1,0,0,0,78,76,1,0,0,0,79,7,1,0,0,
		0,80,81,5,5,0,0,81,82,5,44,0,0,82,83,5,3,0,0,83,84,3,10,5,0,84,85,5,4,
		0,0,85,9,1,0,0,0,86,87,3,12,6,0,87,88,3,26,13,0,88,89,5,1,0,0,89,91,1,
		0,0,0,90,86,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,11,1,
		0,0,0,94,92,1,0,0,0,95,99,3,14,7,0,96,99,3,16,8,0,97,99,3,8,4,0,98,95,
		1,0,0,0,98,96,1,0,0,0,98,97,1,0,0,0,99,13,1,0,0,0,100,102,5,6,0,0,101,
		100,1,0,0,0,101,102,1,0,0,0,102,103,1,0,0,0,103,108,5,44,0,0,104,105,5,
		6,0,0,105,107,5,44,0,0,106,104,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,
		108,109,1,0,0,0,109,15,1,0,0,0,110,108,1,0,0,0,111,117,3,18,9,0,112,117,
		3,20,10,0,113,117,5,7,0,0,114,117,5,8,0,0,115,117,5,9,0,0,116,111,1,0,
		0,0,116,112,1,0,0,0,116,113,1,0,0,0,116,114,1,0,0,0,116,115,1,0,0,0,117,
		17,1,0,0,0,118,123,5,10,0,0,119,123,5,11,0,0,120,121,5,12,0,0,121,123,
		5,11,0,0,122,118,1,0,0,0,122,119,1,0,0,0,122,120,1,0,0,0,123,19,1,0,0,
		0,124,127,3,22,11,0,125,127,3,24,12,0,126,124,1,0,0,0,126,125,1,0,0,0,
		127,21,1,0,0,0,128,137,5,13,0,0,129,137,5,14,0,0,130,137,5,12,0,0,131,
		137,5,15,0,0,132,133,5,12,0,0,133,137,5,12,0,0,134,137,5,16,0,0,135,137,
		5,17,0,0,136,128,1,0,0,0,136,129,1,0,0,0,136,130,1,0,0,0,136,131,1,0,0,
		0,136,132,1,0,0,0,136,134,1,0,0,0,136,135,1,0,0,0,137,23,1,0,0,0,138,139,
		5,18,0,0,139,150,5,13,0,0,140,150,5,19,0,0,141,142,5,18,0,0,142,150,5,
		12,0,0,143,150,5,20,0,0,144,145,5,18,0,0,145,146,5,12,0,0,146,150,5,12,
		0,0,147,150,5,21,0,0,148,150,5,22,0,0,149,138,1,0,0,0,149,140,1,0,0,0,
		149,141,1,0,0,0,149,143,1,0,0,0,149,144,1,0,0,0,149,147,1,0,0,0,149,148,
		1,0,0,0,150,25,1,0,0,0,151,156,3,28,14,0,152,153,5,23,0,0,153,155,3,28,
		14,0,154,152,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,
		27,1,0,0,0,158,156,1,0,0,0,159,162,3,30,15,0,160,162,3,32,16,0,161,159,
		1,0,0,0,161,160,1,0,0,0,162,29,1,0,0,0,163,166,5,44,0,0,164,165,5,24,0,
		0,165,167,3,36,18,0,166,164,1,0,0,0,166,167,1,0,0,0,167,31,1,0,0,0,168,
		169,5,44,0,0,169,170,5,25,0,0,170,171,3,36,18,0,171,174,5,26,0,0,172,173,
		5,24,0,0,173,175,3,34,17,0,174,172,1,0,0,0,174,175,1,0,0,0,175,33,1,0,
		0,0,176,177,5,3,0,0,177,182,3,36,18,0,178,179,5,23,0,0,179,181,3,36,18,
		0,180,178,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,
		185,1,0,0,0,184,182,1,0,0,0,185,186,5,4,0,0,186,35,1,0,0,0,187,192,3,38,
		19,0,188,189,5,27,0,0,189,191,3,38,19,0,190,188,1,0,0,0,191,194,1,0,0,
		0,192,190,1,0,0,0,192,193,1,0,0,0,193,37,1,0,0,0,194,192,1,0,0,0,195,200,
		3,40,20,0,196,197,5,28,0,0,197,199,3,40,20,0,198,196,1,0,0,0,199,202,1,
		0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,39,1,0,0,0,202,200,1,0,0,0,203,
		208,3,42,21,0,204,205,5,29,0,0,205,207,3,42,21,0,206,204,1,0,0,0,207,210,
		1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,41,1,0,0,0,210,208,1,0,0,0,
		211,216,3,44,22,0,212,213,7,0,0,0,213,215,3,44,22,0,214,212,1,0,0,0,215,
		218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,43,1,0,0,0,218,216,1,0,
		0,0,219,224,3,46,23,0,220,221,7,1,0,0,221,223,3,46,23,0,222,220,1,0,0,
		0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,45,1,0,0,0,226,224,
		1,0,0,0,227,232,3,48,24,0,228,229,7,2,0,0,229,231,3,48,24,0,230,228,1,
		0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,47,1,0,0,0,234,
		232,1,0,0,0,235,237,7,3,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,238,1,
		0,0,0,238,239,3,50,25,0,239,49,1,0,0,0,240,241,7,4,0,0,241,51,1,0,0,0,
		25,55,63,71,78,92,98,101,108,116,122,126,136,149,156,161,166,174,182,192,
		200,208,216,224,232,236
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
