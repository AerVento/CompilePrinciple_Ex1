//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./src/MIDL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MIDLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, WS=38, FLOATING_PT=39, 
		INTEGER=40, BOOLEAN=41, CHAR=42, STRING=43, ID=44;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "WS", "LETTER", "DIGIT", "UNDERLINE", 
		"INTEGER_TYPE_SUFFIX", "ESCAPE_SEQUENCE", "EXPONENT", "FLOAT_TYPE_SUFFIX", 
		"FLOATING_PT", "INTEGER", "BOOLEAN", "CHAR", "STRING", "ID"
	};


	public MIDLLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MIDLLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'module'", "'{'", "'}'", "'struct'", "'::'", "'char'", "'string'", 
		"'boolean'", "'float'", "'double'", "'long'", "'short'", "'int16'", "'int32'", 
		"'int64'", "'int8'", "'unsigned'", "'uint16'", "'uint32'", "'uint64'", 
		"'uint8'", "','", "'='", "'['", "']'", "'|'", "'^'", "'&'", "'>>'", "'<<'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'~'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "WS", "FLOATING_PT", "INTEGER", "BOOLEAN", "CHAR", "STRING", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MIDL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MIDLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,44,410,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
		1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
		1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,
		1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,4,37,263,8,
		37,11,37,12,37,264,1,37,1,37,1,38,3,38,270,8,38,1,39,1,39,1,40,1,40,1,
		41,1,41,1,42,1,42,1,42,1,43,1,43,3,43,283,8,43,1,43,4,43,286,8,43,11,43,
		12,43,287,1,44,1,44,1,45,4,45,293,8,45,11,45,12,45,294,1,45,1,45,5,45,
		299,8,45,10,45,12,45,302,9,45,1,45,3,45,305,8,45,1,45,3,45,308,8,45,1,
		45,1,45,4,45,312,8,45,11,45,12,45,313,1,45,3,45,317,8,45,1,45,3,45,320,
		8,45,1,45,4,45,323,8,45,11,45,12,45,324,1,45,1,45,3,45,329,8,45,1,45,4,
		45,332,8,45,11,45,12,45,333,1,45,3,45,337,8,45,1,45,3,45,340,8,45,1,46,
		1,46,1,46,5,46,345,8,46,10,46,12,46,348,9,46,3,46,350,8,46,1,46,3,46,353,
		8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
		1,47,1,47,1,47,1,47,1,47,3,47,373,8,47,1,48,1,48,1,48,1,48,3,48,379,8,
		48,3,48,381,8,48,1,48,1,48,1,49,1,49,1,49,1,49,3,49,389,8,49,5,49,391,
		8,49,10,49,12,49,394,9,49,1,49,1,49,1,50,1,50,3,50,400,8,50,1,50,1,50,
		3,50,404,8,50,5,50,406,8,50,10,50,12,50,409,9,50,1,392,0,51,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
		57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,0,79,0,
		81,0,83,0,85,0,87,0,89,0,91,39,93,40,95,41,97,42,99,43,101,44,1,0,12,3,
		0,9,10,13,13,32,32,2,0,65,90,97,122,1,0,48,57,2,0,76,76,108,108,8,0,34,
		34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,69,69,101,101,
		2,0,43,43,45,45,4,0,68,68,70,70,100,100,102,102,1,0,49,57,1,0,92,92,1,
		0,39,39,1,0,34,34,433,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
		0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
		0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
		0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
		0,0,75,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
		1,0,0,0,0,101,1,0,0,0,1,103,1,0,0,0,3,105,1,0,0,0,5,112,1,0,0,0,7,114,
		1,0,0,0,9,116,1,0,0,0,11,123,1,0,0,0,13,126,1,0,0,0,15,131,1,0,0,0,17,
		138,1,0,0,0,19,146,1,0,0,0,21,152,1,0,0,0,23,159,1,0,0,0,25,164,1,0,0,
		0,27,170,1,0,0,0,29,176,1,0,0,0,31,182,1,0,0,0,33,188,1,0,0,0,35,193,1,
		0,0,0,37,202,1,0,0,0,39,209,1,0,0,0,41,216,1,0,0,0,43,223,1,0,0,0,45,229,
		1,0,0,0,47,231,1,0,0,0,49,233,1,0,0,0,51,235,1,0,0,0,53,237,1,0,0,0,55,
		239,1,0,0,0,57,241,1,0,0,0,59,243,1,0,0,0,61,246,1,0,0,0,63,249,1,0,0,
		0,65,251,1,0,0,0,67,253,1,0,0,0,69,255,1,0,0,0,71,257,1,0,0,0,73,259,1,
		0,0,0,75,262,1,0,0,0,77,269,1,0,0,0,79,271,1,0,0,0,81,273,1,0,0,0,83,275,
		1,0,0,0,85,277,1,0,0,0,87,280,1,0,0,0,89,289,1,0,0,0,91,339,1,0,0,0,93,
		349,1,0,0,0,95,372,1,0,0,0,97,374,1,0,0,0,99,384,1,0,0,0,101,397,1,0,0,
		0,103,104,5,59,0,0,104,2,1,0,0,0,105,106,5,109,0,0,106,107,5,111,0,0,107,
		108,5,100,0,0,108,109,5,117,0,0,109,110,5,108,0,0,110,111,5,101,0,0,111,
		4,1,0,0,0,112,113,5,123,0,0,113,6,1,0,0,0,114,115,5,125,0,0,115,8,1,0,
		0,0,116,117,5,115,0,0,117,118,5,116,0,0,118,119,5,114,0,0,119,120,5,117,
		0,0,120,121,5,99,0,0,121,122,5,116,0,0,122,10,1,0,0,0,123,124,5,58,0,0,
		124,125,5,58,0,0,125,12,1,0,0,0,126,127,5,99,0,0,127,128,5,104,0,0,128,
		129,5,97,0,0,129,130,5,114,0,0,130,14,1,0,0,0,131,132,5,115,0,0,132,133,
		5,116,0,0,133,134,5,114,0,0,134,135,5,105,0,0,135,136,5,110,0,0,136,137,
		5,103,0,0,137,16,1,0,0,0,138,139,5,98,0,0,139,140,5,111,0,0,140,141,5,
		111,0,0,141,142,5,108,0,0,142,143,5,101,0,0,143,144,5,97,0,0,144,145,5,
		110,0,0,145,18,1,0,0,0,146,147,5,102,0,0,147,148,5,108,0,0,148,149,5,111,
		0,0,149,150,5,97,0,0,150,151,5,116,0,0,151,20,1,0,0,0,152,153,5,100,0,
		0,153,154,5,111,0,0,154,155,5,117,0,0,155,156,5,98,0,0,156,157,5,108,0,
		0,157,158,5,101,0,0,158,22,1,0,0,0,159,160,5,108,0,0,160,161,5,111,0,0,
		161,162,5,110,0,0,162,163,5,103,0,0,163,24,1,0,0,0,164,165,5,115,0,0,165,
		166,5,104,0,0,166,167,5,111,0,0,167,168,5,114,0,0,168,169,5,116,0,0,169,
		26,1,0,0,0,170,171,5,105,0,0,171,172,5,110,0,0,172,173,5,116,0,0,173,174,
		5,49,0,0,174,175,5,54,0,0,175,28,1,0,0,0,176,177,5,105,0,0,177,178,5,110,
		0,0,178,179,5,116,0,0,179,180,5,51,0,0,180,181,5,50,0,0,181,30,1,0,0,0,
		182,183,5,105,0,0,183,184,5,110,0,0,184,185,5,116,0,0,185,186,5,54,0,0,
		186,187,5,52,0,0,187,32,1,0,0,0,188,189,5,105,0,0,189,190,5,110,0,0,190,
		191,5,116,0,0,191,192,5,56,0,0,192,34,1,0,0,0,193,194,5,117,0,0,194,195,
		5,110,0,0,195,196,5,115,0,0,196,197,5,105,0,0,197,198,5,103,0,0,198,199,
		5,110,0,0,199,200,5,101,0,0,200,201,5,100,0,0,201,36,1,0,0,0,202,203,5,
		117,0,0,203,204,5,105,0,0,204,205,5,110,0,0,205,206,5,116,0,0,206,207,
		5,49,0,0,207,208,5,54,0,0,208,38,1,0,0,0,209,210,5,117,0,0,210,211,5,105,
		0,0,211,212,5,110,0,0,212,213,5,116,0,0,213,214,5,51,0,0,214,215,5,50,
		0,0,215,40,1,0,0,0,216,217,5,117,0,0,217,218,5,105,0,0,218,219,5,110,0,
		0,219,220,5,116,0,0,220,221,5,54,0,0,221,222,5,52,0,0,222,42,1,0,0,0,223,
		224,5,117,0,0,224,225,5,105,0,0,225,226,5,110,0,0,226,227,5,116,0,0,227,
		228,5,56,0,0,228,44,1,0,0,0,229,230,5,44,0,0,230,46,1,0,0,0,231,232,5,
		61,0,0,232,48,1,0,0,0,233,234,5,91,0,0,234,50,1,0,0,0,235,236,5,93,0,0,
		236,52,1,0,0,0,237,238,5,124,0,0,238,54,1,0,0,0,239,240,5,94,0,0,240,56,
		1,0,0,0,241,242,5,38,0,0,242,58,1,0,0,0,243,244,5,62,0,0,244,245,5,62,
		0,0,245,60,1,0,0,0,246,247,5,60,0,0,247,248,5,60,0,0,248,62,1,0,0,0,249,
		250,5,43,0,0,250,64,1,0,0,0,251,252,5,45,0,0,252,66,1,0,0,0,253,254,5,
		42,0,0,254,68,1,0,0,0,255,256,5,47,0,0,256,70,1,0,0,0,257,258,5,37,0,0,
		258,72,1,0,0,0,259,260,5,126,0,0,260,74,1,0,0,0,261,263,7,0,0,0,262,261,
		1,0,0,0,263,264,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,
		0,266,267,6,37,0,0,267,76,1,0,0,0,268,270,7,1,0,0,269,268,1,0,0,0,270,
		78,1,0,0,0,271,272,7,2,0,0,272,80,1,0,0,0,273,274,5,95,0,0,274,82,1,0,
		0,0,275,276,7,3,0,0,276,84,1,0,0,0,277,278,5,92,0,0,278,279,7,4,0,0,279,
		86,1,0,0,0,280,282,7,5,0,0,281,283,7,6,0,0,282,281,1,0,0,0,282,283,1,0,
		0,0,283,285,1,0,0,0,284,286,7,2,0,0,285,284,1,0,0,0,286,287,1,0,0,0,287,
		285,1,0,0,0,287,288,1,0,0,0,288,88,1,0,0,0,289,290,7,7,0,0,290,90,1,0,
		0,0,291,293,7,2,0,0,292,291,1,0,0,0,293,294,1,0,0,0,294,292,1,0,0,0,294,
		295,1,0,0,0,295,296,1,0,0,0,296,300,5,46,0,0,297,299,7,2,0,0,298,297,1,
		0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,304,1,0,0,0,
		302,300,1,0,0,0,303,305,3,87,43,0,304,303,1,0,0,0,304,305,1,0,0,0,305,
		307,1,0,0,0,306,308,3,89,44,0,307,306,1,0,0,0,307,308,1,0,0,0,308,340,
		1,0,0,0,309,311,5,46,0,0,310,312,7,2,0,0,311,310,1,0,0,0,312,313,1,0,0,
		0,313,311,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,317,3,87,43,0,316,
		315,1,0,0,0,316,317,1,0,0,0,317,319,1,0,0,0,318,320,3,89,44,0,319,318,
		1,0,0,0,319,320,1,0,0,0,320,340,1,0,0,0,321,323,7,2,0,0,322,321,1,0,0,
		0,323,324,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,
		328,3,87,43,0,327,329,3,89,44,0,328,327,1,0,0,0,328,329,1,0,0,0,329,340,
		1,0,0,0,330,332,7,2,0,0,331,330,1,0,0,0,332,333,1,0,0,0,333,331,1,0,0,
		0,333,334,1,0,0,0,334,336,1,0,0,0,335,337,3,87,43,0,336,335,1,0,0,0,336,
		337,1,0,0,0,337,338,1,0,0,0,338,340,3,89,44,0,339,292,1,0,0,0,339,309,
		1,0,0,0,339,322,1,0,0,0,339,331,1,0,0,0,340,92,1,0,0,0,341,350,5,48,0,
		0,342,346,7,8,0,0,343,345,7,2,0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,
		344,1,0,0,0,346,347,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,349,341,1,
		0,0,0,349,342,1,0,0,0,350,352,1,0,0,0,351,353,3,83,41,0,352,351,1,0,0,
		0,352,353,1,0,0,0,353,94,1,0,0,0,354,355,5,84,0,0,355,356,5,82,0,0,356,
		357,5,85,0,0,357,373,5,69,0,0,358,359,5,116,0,0,359,360,5,114,0,0,360,
		361,5,117,0,0,361,373,5,101,0,0,362,363,5,70,0,0,363,364,5,65,0,0,364,
		365,5,76,0,0,365,366,5,83,0,0,366,373,5,69,0,0,367,368,5,102,0,0,368,369,
		5,97,0,0,369,370,5,108,0,0,370,371,5,115,0,0,371,373,5,101,0,0,372,354,
		1,0,0,0,372,358,1,0,0,0,372,362,1,0,0,0,372,367,1,0,0,0,373,96,1,0,0,0,
		374,380,5,39,0,0,375,381,3,85,42,0,376,379,8,9,0,0,377,379,8,10,0,0,378,
		376,1,0,0,0,378,377,1,0,0,0,379,381,1,0,0,0,380,375,1,0,0,0,380,378,1,
		0,0,0,381,382,1,0,0,0,382,383,5,39,0,0,383,98,1,0,0,0,384,392,5,34,0,0,
		385,391,3,85,42,0,386,389,8,9,0,0,387,389,8,11,0,0,388,386,1,0,0,0,388,
		387,1,0,0,0,389,391,1,0,0,0,390,385,1,0,0,0,390,388,1,0,0,0,391,394,1,
		0,0,0,392,393,1,0,0,0,392,390,1,0,0,0,393,395,1,0,0,0,394,392,1,0,0,0,
		395,396,5,34,0,0,396,100,1,0,0,0,397,407,3,77,38,0,398,400,3,81,40,0,399,
		398,1,0,0,0,399,400,1,0,0,0,400,403,1,0,0,0,401,404,3,77,38,0,402,404,
		3,79,39,0,403,401,1,0,0,0,403,402,1,0,0,0,404,406,1,0,0,0,405,399,1,0,
		0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,102,1,0,0,0,409,
		407,1,0,0,0,29,0,264,269,282,287,294,300,304,307,313,316,319,324,328,333,
		336,339,346,349,352,372,378,380,388,390,392,399,403,407,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
